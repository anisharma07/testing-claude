name: Claude AI Comment Organizer

on:
  issue_comment:
    types: [created]

jobs:
  claude-organize:
    runs-on: ubuntu-latest
    # Only run if the comment contains "@claude organize"
    if: contains(github.event.comment.body, '@claude organize')
    permissions:
      contents: read
      issues: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          pip install boto3 requests

      - name: Organize comment with Claude
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AWS_BEDROCK_MODEL_ID: ${{ secrets.AWS_BEDROCK_MODEL_ID }}
          COMMENT_BODY: ${{ github.event.comment.body }}
          COMMENT_ID: ${{ github.event.comment.id }}
          COMMENT_URL: ${{ github.event.comment.html_url }}
        run: |
          cat << 'EOF' > claude_organize.py
          import boto3
          import json
          import os
          import requests
          import re

          def get_bedrock_client():
              return boto3.client('bedrock-runtime', region_name=os.environ['AWS_DEFAULT_REGION'])

          def organize_with_claude(comment_text):
              client = get_bedrock_client()
              
              # Remove the @claude organize trigger from the comment
              cleaned_comment = re.sub(r'@claude\s+organize\s*', '', comment_text, flags=re.IGNORECASE).strip()
              
              if not cleaned_comment:
                  return "No content to organize after removing the @claude organize command."
              
              prompt = f"""
          You are an expert at organizing and structuring text content. Please take the following comment and reorganize it into a clear, well-structured format with proper bullet points and organization.

          Original comment:
          ```
          {cleaned_comment}
          ```

          Please reorganize this content following these guidelines:
          1. Create clear sections with appropriate headings if the content covers multiple topics
          2. Use bullet points and sub-bullets for better readability
          3. Group related information together
          4. Maintain all the original information - don't add or remove content
          5. Use proper markdown formatting
          6. If there are action items, group them together
          7. If there are questions, group them together
          8. Make the structure logical and easy to follow

          Return only the organized content without any explanatory text about what you did.
          """

              body = {
                  "anthropic_version": "bedrock-2023-05-31",
                  "max_tokens": 4000,
                  "messages": [
                      {
                          "role": "user",
                          "content": prompt
                      }
                  ]
              }
              
              response = client.invoke_model(
                  body=json.dumps(body),
                  modelId=os.environ.get('AWS_BEDROCK_MODEL_ID', 'anthropic.claude-3-sonnet-20240229-v1:0'),
                  accept='application/json',
                  contentType='application/json'
              )
              
              response_body = json.loads(response.get('body').read())
              return response_body['content'][0]['text']

          def post_organized_comment(organized_content, original_comment_url):
              github_token = os.environ['GITHUB_TOKEN']
              repo = os.environ['GITHUB_REPOSITORY']
              
              # Determine if this is an issue or PR comment
              if 'pull' in original_comment_url:
                  issue_number = os.environ['GITHUB_REF'].split('/')[-1] if 'GITHUB_REF' in os.environ else None
                  if not issue_number:
                      # Extract from the comment URL or event
                      issue_number = original_comment_url.split('/')[-1].split('#')[0]
              else:
                  # For issue comments, we can get the issue number from the event
                  issue_number = None
              
              # Try to get issue/PR number from the GitHub context
              try:
                  # Get issue/PR number from GitHub API using the comment ID
                  headers = {
                      'Authorization': f'token {github_token}',
                      'Accept': 'application/vnd.github.v3+json'
                  }
                  
                  comment_id = os.environ['COMMENT_ID']
                  comment_api_url = f'https://api.github.com/repos/{repo}/issues/comments/{comment_id}'
                  response = requests.get(comment_api_url, headers=headers)
                  
                  if response.status_code == 200:
                      comment_data = response.json()
                      issue_url = comment_data['issue_url']
                      issue_number = issue_url.split('/')[-1]
                  else:
                      print(f"Failed to get comment details: {response.status_code}")
                      return
                      
              except Exception as e:
                  print(f"Error getting issue number: {e}")
                  return
              
              headers = {
                  'Authorization': f'token {github_token}',
                  'Accept': 'application/vnd.github.v3+json'
              }
              
              comment_body = f"""## ü§ñ Organized by Claude AI

          {organized_content}

          ---
          *This organized version was generated automatically by Claude AI via Amazon Bedrock*

          [Original comment]({original_comment_url})
          """
              
              url = f'https://api.github.com/repos/{repo}/issues/{issue_number}/comments'
              response = requests.post(url, headers=headers, json={'body': comment_body})
              
              if response.status_code == 201:
                  print("‚úÖ Organized comment posted successfully")
              else:
                  print(f"‚ùå Failed to post organized comment: {response.status_code}")
                  print(response.text)

          def main():
              comment_body = os.environ['COMMENT_BODY']
              comment_url = os.environ['COMMENT_URL']
              
              print("üîç Organizing comment with Claude...")
              organized_content = organize_with_claude(comment_body)
              
              print("üìù Posting organized comment...")
              post_organized_comment(organized_content, comment_url)

          if __name__ == "__main__":
              main()
          EOF

          python claude_organize.py
